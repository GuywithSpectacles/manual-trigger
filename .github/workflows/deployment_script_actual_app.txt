```yaml
name: üöÄ Deploy PHP Projects to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout Code
        uses: actions/checkout@v3

      - name: üîê Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.MAC_HOSTINGER_VPS }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -4 ${{ vars.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: üìÇ Sync Project Files
        run: |
          for folder in apps/*/; do
            if [ -d "$folder" ] && [ -f "$folder/index.php" ]; then
              NAME=$(basename "$folder")
              echo "üöö Deploying $NAME..."
              rsync -avz --delete \
                -e "ssh -4 -i ~/.ssh/id_ed25519" \
                "$folder"/ aqeel@31.97.69.91:/home/aqeel/"$NAME"
            else
              echo "‚è≠ Skipped $folder (not a valid PHP project)"
            fi
          done

      - name: ‚öôÔ∏è Configure Nginx and Databases Remotely
        run: |
          ssh -4 -i ~/.ssh/id_ed25519 aqeel@31.97.69.91 bash -s <<'EOF'
            set -euo pipefail

            whoami
            sudo -l
            BASE_DIR="/home/aqeel"
            PORTS_FILE="$BASE_DIR/ports.txt"
            START_PORT=8081
            BACKUP_DIR="$BASE_DIR/backups"
            mkdir -p "$BACKUP_DIR"
            cd "$BASE_DIR" || exit 1

            # Install Composer if not present
            if ! command -v composer &> /dev/null; then
              echo "üì¶ Installing Composer..."
              sudo -n /usr/bin/wget https://getcomposer.org/installer -O composer-setup.php
              sudo -n /usr/bin/php composer-setup.php --install-dir=/usr/local/bin --filename=composer
              sudo -n /usr/bin/rm composer-setup.php
            fi

            # Set Stripe environment variable
            echo "export STRIPE_TEST_KEY='${{ secrets.STRIPE_TEST_KEY }}'" | sudo -n /usr/bin/tee -a /etc/environment
            source /etc/environment

            # Remove only project-related Nginx configs
            for conf in /etc/nginx/sites-available/*; do
              name=$(basename "$conf")
              [ -d "$BASE_DIR/$name" ] && sudo -n /usr/bin/rm -f "$conf"
            done
            for conf in /etc/nginx/sites-enabled/*; do
              name=$(basename "$conf")
              [ -d "$BASE_DIR/$name" ] && sudo -n /usr/bin/rm -f "$conf"
            done

            for dir in */; do
              SITE_NAME="${dir%/}"
              # Skip non-project directories
              case "$SITE_NAME" in
                backups|.backup|.ssh|.git|node_modules|.cache|logs|tmp|.*)
                  echo "‚è© Skipped $SITE_NAME (non-project directory)"
                  continue
                  ;;
              esac

              DEPLOY_DIR="$BASE_DIR/$SITE_NAME"
              if [ ! -f "$DEPLOY_DIR/index.php" ]; then
                echo "‚è© Skipped $SITE_NAME (no index.php)"
                continue
              fi

              # Install Composer dependencies
              if [ -f "$DEPLOY_DIR/composer.json" ]; then
                echo "üì¶ Installing Composer dependencies for $SITE_NAME..."
                cd "$DEPLOY_DIR"
                sudo -n /usr/local/bin/composer install --no-dev --optimize-autoloader
                sudo -n /usr/bin/chown -R aqeel:www-data vendor/
                cd "$BASE_DIR"
              fi

              CONFIG_FILE="/etc/nginx/sites-available/$SITE_NAME"
              ENABLED_LINK="/etc/nginx/sites-enabled/$SITE_NAME"
              DB_NAME="${SITE_NAME}_db"
              DB_USER="${SITE_NAME}_user"
              DB_PASS=$(openssl rand -base64 20 | tr -dc 'a-zA-Z0-9')
              DB_HOST="localhost"
              DB_CHARSET="utf8mb4"
              SECRET_KEY=$(openssl rand -hex 32)

              echo "üîß Setting up site: $SITE_NAME"

              # Generate int/config.php
              mkdir -p "$DEPLOY_DIR/int"
              cat <<EOCONFIG | sudo -n /usr/bin/tee "$DEPLOY_DIR/int/config.php"
<?php
define('PATH', realpath('.'));
define('SUBFOLDER', false);
define('URL', 'http://31.97.69.91:\${PORT}');
define('ADMIN_URL', 'admin');
define('KEY', '\${SECRET_KEY}');
ini_set('display_errors', 0);
date_default_timezone_set('Asia/Kolkata');
return [
  'db' => [
    'name' => '\${DB_NAME}',
    'host' => '\${DB_HOST}',
    'user' => '\${DB_USER}',
    'pass' => '\${DB_PASS}',
    'charset' => '\${DB_CHARSET}'
  ]
];
EOCONFIG

              sudo -n /usr/bin/chown aqeel:www-data "$DEPLOY_DIR/int/config.php"
              sudo -n /usr/bin/chmod 640 "$DEPLOY_DIR/int/config.php"

              # Database setup
              if [ -d "$DEPLOY_DIR" ]; then
                DB_EXISTS=$(sudo -n /usr/bin/mysql -uroot -e "SELECT SCHEMA_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME='$DB_NAME';" | grep -w "$DB_NAME")
                if [ -z "$DB_EXISTS" ]; then
                  echo "üóÑ Creating database: $DB_NAME"
                  sudo -n /usr/bin/mysql -uroot -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\` CHARACTER SET $DB_CHARSET;"
                  sudo -n /usr/bin/mysql -uroot -e "CREATE USER IF NOT EXISTS '$DB_USER'@'$DB_HOST' IDENTIFIED BY '$DB_PASS';"
                  sudo -n /usr/bin/mysql -uroot -e "GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'$DB_HOST';"
                  sudo -n /usr/bin/mysql -uroot -e "FLUSH PRIVILEGES;"
                  if [ -f "$DEPLOY_DIR/db.sql" ]; then
                    echo "üì• Applying db.sql for $DB_NAME..."
                    sudo -n /usr/bin/mysql -uroot "$DB_NAME" < "$DEPLOY_DIR/db.sql"
                    echo "‚úÖ Schema applied for $DB_NAME"
                  fi
                fi
              fi

              # Port assignment
              touch "$PORTS_FILE"
              PORT=$(grep "^$SITE_NAME:" "$PORTS_FILE" | cut -d':' -f2)
              if [ -z "$PORT" ]; then
                LAST_PORT=$(awk -F: '{print $2}' "$PORTS_FILE" | sort -n | tail -1)
                [ -z "$LAST_PORT" ] && LAST_PORT=$((START_PORT - 1))
                PORT=$((LAST_PORT + 1))
                echo "$SITE_NAME:$PORT" >> "$PORTS_FILE"
              fi

              # Backup previous deployment
              if [ -d "$DEPLOY_DIR" ]; then
                TIME=$(date +%Y%m%d%H%M%S)
                cp -r "$DEPLOY_DIR" "$BACKUP_DIR/${SITE_NAME}_$TIME"
                find "$BACKUP_DIR" -type d -mtime +7 -exec rm -rf {} \;
              fi

              cat <<EOCONFIG | sudo -n /usr/bin/tee "$CONFIG_FILE"
server {
    listen $PORT;
    server_name localhost;
    root $DEPLOY_DIR;
    index index.php default.php;
    client_max_body_size 100M;

    location / {
        try_files \$uri \$uri/ /index.php?\$query_string;
    }

    location ~ \.php\$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
    }

    location ~ /\.ht {
        deny all;
    }

    # Deny access to /int directory
    location ~ ^/int/ {
        deny all;
    }

    # Deny access to /core directory
    location ~ ^/core/ {
        deny all;
    }
}
EOCONFIG

              sudo -n /usr/bin/chown aqeel:www-data "$CONFIG_FILE"
              sudo -n /usr/bin/chmod 644 "$CONFIG_FILE"
              sudo -n /usr/bin/ln -sf "$CONFIG_FILE" "$ENABLED_LINK"
              echo "üåç $SITE_NAME live at http://31.97.69.91:$PORT"
            done

            # Firewall Rules
            sudo -n /usr/sbin/ufw allow 22/tcp
            sudo -n /usr/sbin/ufw allow 80/tcp
            sudo -n /usr/sbin/ufw allow 443/tcp
            if [ -f "$PORTS_FILE" ]; then
              while IFS=: read -r site port; do
                if [ -n "$port" ]; then
                  sudo -n /usr/sbin/ufw allow "$port"/tcp
                  echo "üîì Allowed port $port for $site"
                fi
              done < "$PORTS_FILE"
            fi

            sudo -n /usr/sbin/ufw reload
            sudo -n /usr/sbin/ufw status
            sudo -n /usr/sbin/nginx -t || { echo "üö® Nginx config test failed"; exit 1; }
            sudo -n /usr/bin/systemctl reload nginx || { echo "üö® Nginx reload failed"; exit 1; }
            echo "‚úÖ Nginx configured and reloaded successfully"
          EOF

      - name: üêõ Debug SSH
        run: |
          ssh -4 -i ~/.ssh/id_ed25519 aqeel@31.97.69.91 "echo '‚úÖ SSH Working ‚Äî Deployment Complete'"
```